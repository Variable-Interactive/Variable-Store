[gd_scene load_steps=2 format=2]

[ext_resource path="res://src/Extensions/Example/elements/NewExtension.gd" type="Script" id=1]

[node name="NewExtension" type="ConfirmationDialog"]
visible = true
margin_right = 402.0
margin_bottom = 316.0
rect_min_size = Vector2( 402, 316 )
window_title = "New Extension"
script = ExtResource( 1 )

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 8.0
margin_right = -8.0
margin_bottom = -36.0

[node name="Name" type="HBoxContainer" parent="VBoxContainer"]
margin_right = 520.0
margin_bottom = 30.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/Name"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Name:"
align = 2

[node name="LineEdit" type="LineEdit" parent="VBoxContainer/Name"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Name of Extension"

[node name="DisplayName" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 34.0
margin_right = 520.0
margin_bottom = 64.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/DisplayName"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Display Name:"
align = 2

[node name="LineEdit" type="LineEdit" parent="VBoxContainer/DisplayName"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Name visible to user"

[node name="Description" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 68.0
margin_right = 520.0
margin_bottom = 98.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/Description"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Description:"
align = 2

[node name="LineEdit" type="LineEdit" parent="VBoxContainer/Description"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "What does this extension do?"

[node name="Author" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 102.0
margin_right = 520.0
margin_bottom = 132.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/Author"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Author:"
align = 2

[node name="LineEdit" type="LineEdit" parent="VBoxContainer/Author"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "Your own name?"

[node name="Version" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 136.0
margin_right = 520.0
margin_bottom = 166.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/Version"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Version:"
align = 2

[node name="SpinBox" type="SpinBox" parent="VBoxContainer/Version"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
min_value = 0.1
max_value = 1000.0
step = 0.001
value = 0.1
allow_greater = true

[node name="License" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 170.0
margin_right = 520.0
margin_bottom = 200.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/License"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "License:"
align = 2

[node name="LineEdit" type="LineEdit" parent="VBoxContainer/License"]
margin_left = 104.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3
placeholder_text = "MIT, etc..."

[node name="AddDialog" type="HBoxContainer" parent="VBoxContainer"]
visible = false
margin_top = 204.0
margin_right = 520.0
margin_bottom = 234.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/AddDialog"]
margin_top = 8.0
margin_right = 333.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Shall i also throw in a pre-configured WindowDialog?"
align = 2

[node name="Custom" type="CheckBox" parent="VBoxContainer/AddDialog"]
margin_left = 337.0
margin_right = 520.0
margin_bottom = 30.0
size_flags_horizontal = 3

[node name="VSplitContainer" type="VSplitContainer" parent="VBoxContainer"]
margin_top = 204.0
margin_right = 520.0
margin_bottom = 204.0

[node name="Save" type="HBoxContainer" parent="VBoxContainer"]
margin_top = 208.0
margin_right = 520.0
margin_bottom = 238.0
rect_min_size = Vector2( 0, 30 )

[node name="Label" type="Label" parent="VBoxContainer/Save"]
margin_top = 8.0
margin_right = 100.0
margin_bottom = 22.0
rect_min_size = Vector2( 100, 0 )
text = "Save Path:"
align = 2

[node name="path" type="LineEdit" parent="VBoxContainer/Save"]
margin_left = 104.0
margin_right = 451.0
margin_bottom = 30.0
size_flags_horizontal = 3
editable = false

[node name="Choose" type="Button" parent="VBoxContainer/Save"]
margin_left = 455.0
margin_right = 520.0
margin_bottom = 30.0
text = "Choose?"

[node name="FileDialog" type="FileDialog" parent="."]
margin_left = 8.0
margin_top = 8.0
margin_right = 528.0
margin_bottom = 280.0
rect_min_size = Vector2( 172, 60.2 )
window_title = "Open a Directory"
mode = 2
access = 2

[node name="Error" type="AcceptDialog" parent="."]
margin_left = 8.0
margin_top = 8.0
margin_right = 528.0
margin_bottom = 280.0
dialog_text = "Error: Directory not created"

[node name="Hidden" type="Node" parent="."]

[node name="ApiDoc" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "# A reference of the ExtensionApi


\"\"\"
# gdlint: ignore=max-public-methods
extends Node

enum { FILE, EDIT, SELECT, IMAGE, VIEW, WINDOW, HELP }


func get_current_project() -> Project:
	return Global.current_project


func dialog_open(open: bool) -> void:
	Global.dialog_open(open)


func get_global() -> Global:
	return Global


func get_extensions_node() -> Node:
	return Global.control.get_node(\"Extensions\")


func get_config_file() -> ConfigFile:
	return Global.config_cache


func get_canvas() -> Canvas:
	return Global.canvas


func _get_popup_menu(menu_type: int) -> PopupMenu:
	match menu_type:
		FILE:
			return Global.top_menu_container.file_menu_button.get_popup()
		EDIT:
			return Global.top_menu_container.edit_menu_button.get_popup()
		SELECT:
			return Global.top_menu_container.select_menu_button.get_popup()
		IMAGE:
			return Global.top_menu_container.image_menu_button.get_popup()
		VIEW:
			return Global.top_menu_container.view_menu_button.get_popup()
		WINDOW:
			return Global.top_menu_container.window_menu_button.get_popup()
		HELP:
			return Global.top_menu_container.help_menu_button.get_popup()
	return null


func add_menu_item(menu_type: int, item_name: String, item_metadata, item_id := -1) -> int:
	var image_menu: PopupMenu = _get_popup_menu(menu_type)
	if not image_menu:
		return -1
	image_menu.add_item(item_name, item_id)
	var idx := item_id
	if item_id == -1:
		idx = image_menu.get_item_count() - 1
	image_menu.set_item_metadata(idx, item_metadata)

	return idx


func remove_menu_item(menu_type: int, item_idx: int) -> void:
	var image_menu: PopupMenu = _get_popup_menu(menu_type)
	if not image_menu:
		return
	image_menu.remove_item(item_idx)


func add_tool(
	tool_name: String,
	display_name: String,
	shortcut: String,
	scene: PackedScene,
	extra_hint := \"\",
	extra_shortucts := []
) -> void:
	var tool_class := Tools.Tool.new(
		tool_name, display_name, shortcut, scene, extra_hint, extra_shortucts
	)
	Tools.tools[tool_name] = tool_class
	Tools.add_tool_button(tool_class)


func remove_tool(tool_name: String) -> void:
	var tool_class: Tools.Tool = Tools.tools[tool_name]
	if tool_class:
		Tools.remove_tool(tool_class)


func add_theme(theme: Theme) -> void:
	var themes: BoxContainer = Global.preferences_dialog.find_node(\"Themes\")
	themes.themes.append(theme)
	themes.add_theme(theme)


func get_theme() -> Theme:
	return Global.control.theme


func remove_theme(theme: Theme) -> void:
	Global.preferences_dialog.themes.remove_theme(theme)

\"\"\""

[node name="ExportCfg" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "[preset.0]

name=\"Windows Desktop\"
platform=\"Windows Desktop\"
runnable=true
custom_features=\"\"
export_filter=\"all_resources\"
include_filter=\"*.json\"
exclude_filter=\"\"
export_path=\"\"
script_export_mode=1
script_encryption_key=\"\"

[preset.0.options]

custom_template/debug=\"\"
custom_template/release=\"\"
binary_format/64_bits=true
binary_format/embed_pck=false
texture_format/bptc=false
texture_format/s3tc=true
texture_format/etc=false
texture_format/etc2=false
texture_format/no_bptc_fallbacks=true
codesign/enable=false
codesign/identity=\"\"
codesign/password=\"\"
codesign/timestamp=true
codesign/timestamp_server_url=\"\"
codesign/digest_algorithm=1
codesign/description=\"\"
codesign/custom_options=PoolStringArray(  )
application/icon=\"\"
application/file_version=\"\"
application/product_version=\"\"
application/company_name=\"\"
application/product_name=\"\"
application/file_description=\"\"
application/copyright=\"\"
application/trademarks=\"\""

[node name="MainGd" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "extends Node

var extension_api :Node  # Needed for reference to \"ExtensionsApi\" node of Pixelorama (Used most of the time)

# This script acts as a setup for the extension
func _enter_tree() -> void:
	extension_api = get_node_or_null(\"/root/ExtensionsApi\")
	if extension_api:
		pass

func _exit_tree() -> void:
	if extension_api:
		pass"

[node name="MainTscn" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "[gd_scene load_steps=2 format=2]

[ext_resource path=\"res://src/Extensions/%s/Main.gd\" type=\"Script\" id=1]

[node name=\"Main\" type=\"Node\"]
script = ExtResource( 1 )"

[node name="Project" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=4

[application]

config/name=\"Example\"
config/description=\"A pixelorama Extention (The \\\"Name\\\" and \\\"Description\\\" field are not related to extention system so they can be anything)\"
run/main_scene=\"res://src/Extensions/Example/Main.tscn\"

[physics]

common/enable_pause_aware_picking=true

[rendering]

quality/driver/driver_name=\"GLES2\"
vram_compression/import_etc=true
vram_compression/import_etc2=false"

[node name="DialogGd" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "extends WindowDialog


####################################################
###                                              ###
########       Enter Your code Here         ########

# Declare member variables here. Examples:
# var a: int = 2
# var b: String = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	# if you want to interact with other elements while popup is
	# open then use show() instead of popup() and popup_centered()
	show()

###                                             ####
####################################################


#### You don't have to touch anything below
var _global :Node  # Needed for reference to \"Global\" node of Pixelorama (Used most of the time)


func _on_Instructions_visibility_changed() -> void:  # Popup the dialog
	_global = get_node_or_null(\"/root/Global\")
	if visible:
		set_global_position(OS.window_size/2.0 - rect_size/2.0)


func _input(event: InputEvent) -> void:
	if event is InputEventMouse:
		var mouse_pos = get_local_mouse_position()

		# Avoid canvas interaction if hovering above dialog
		if _global:
			if Rect2(Vector2.ZERO, rect_size).has_point(mouse_pos):
				_global.can_draw = false
			else:
				if _global.has_focus:
					_global.can_draw = true
"

[node name="DialogTscn" type="RichTextLabel" parent="Hidden"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
text = "[gd_scene load_steps=2 format=2]

[ext_resource path=\"res://src/Extensions/%s/Dialog/Dialog.gd\" type=\"Script\" id=1]

[node name=\"Instructions\" type=\"WindowDialog\"]
margin_right = 399.0
margin_bottom = 301.0
rect_min_size = Vector2( 150, 150 )
window_title = \"Instructions\"
resizable = true
script = ExtResource( 1 )

[connection signal=\"visibility_changed\" from=\".\" to=\".\" method=\"_on_Instructions_visibility_changed\"]"

[connection signal="about_to_show" from="." to="." method="_on_NewExtension_about_to_show"]
[connection signal="confirmed" from="." to="." method="_on_NewExtension_confirmed"]
[connection signal="text_changed" from="VBoxContainer/Name/LineEdit" to="." method="_on_Name_text_changed"]
[connection signal="text_changed" from="VBoxContainer/DisplayName/LineEdit" to="." method="_on_DisplayName_text_changed"]
[connection signal="text_changed" from="VBoxContainer/Description/LineEdit" to="." method="_on_Description_text_changed"]
[connection signal="text_changed" from="VBoxContainer/Author/LineEdit" to="." method="_on_Author_text_changed"]
[connection signal="value_changed" from="VBoxContainer/Version/SpinBox" to="." method="_on_Version_value_changed"]
[connection signal="text_changed" from="VBoxContainer/License/LineEdit" to="." method="_on_License_text_changed"]
[connection signal="toggled" from="VBoxContainer/AddDialog/Custom" to="." method="_on_Custom_toggled"]
[connection signal="pressed" from="VBoxContainer/Save/Choose" to="." method="_on_Choose_pressed"]
[connection signal="dir_selected" from="FileDialog" to="." method="_on_FileDialog_dir_selected"]
